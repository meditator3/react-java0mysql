name: CI over runner and CD over k8s

on:
  push:
    branches: [ "Dev"]
    paths-ignore:
      - 'manifest/**' 
  pull_request:
    branches: [ "Dev"]
 
jobs:

  build:

    runs-on: [self-hosted, CI-server]

    steps:
    - uses: actions/checkout@v3
    - name: Build the Docker compose
      run: docker compose up -d
      
  Test:
    needs: build 
    runs-on: [self-hosted, CI-server]
    steps:
      - name: list containers & Test up&running
        run: |
         sleep 15 
         if [ $(docker ps -a | grep -doq "Exited") ]; then
            echo "At least one container in 'Exited' state found. List Test Failed."
         else
            echo "No containers in 'Exited' state found. List Test passed."
         fi
      - name: test front end container  
        run: sleep 5 && curl http://localhost:3000
        
  push_to_dockerHub:
    needs: Test
    runs-on: [self-hosted, CI-server]
    steps:
      - name: docker login
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: docker login --username ${DOCKERHUB_USERNAME} --password-stdin <<< "${DOCKERHUB_TOKEN}"
      - name: push all images to docker hub
        run: |
          for image in $(docker images --format "{{.Repository}}" | grep react*:latest)
            do
             echo "image name: ${image}"
             echo "github run number: ${GITHUB_RUN_NUMBER}"
             docker tag ${image} arielguez/${image}:${GITHUB_RUN_NUMBER}         
             docker push arielguez/${image}:${GITHUB_RUN_NUMBER}
          done
          mysql_and_tag=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep ^mysql)
          echo "mysql_and_tag=${mysql_and_tag}"
          mysql_tag=$(echo ${mysql_and_tag} | awk -F: '{print $2}')
          echo "mysql_tag=${mysql_tag}"
          docker tag mysql:${mysql_tag} arielguez/mysql:${GITHUB_RUN_NUMBER}
          docker push arielguez/mysql:${GITHUB_RUN_NUMBER}
          
  update_manifest:
    needs: push_to_dockerHub
    runs-on: [self-hosted, CI-server]
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Update Kubernetes manifest
        run: |
          IMAGE_TAG=${GITHUB_RUN_NUMBER}
          sed -i "s|image: arielguez/react-java0mysql-backend:.*|image: arielguez/react-java0mysql-backend:$IMAGE_TAG|" ./manifest/backend-deployment.yaml
          sed -i "s|image: arielguez/react-java0mysql-frontend:.*|image: arielguez/react-java0mysql-frontend:$IMAGE_TAG|" ./manifest/frontend-deployment.yaml
          sed -i "s|image: arielguez/mysql:.*|image: arielguez/mysql:$IMAGE_TAG|" ./manifest/db-deployment.yaml
          cat ./manifest/frontend-deployment.yaml
          git config user.name 'CI Bot'
          git config user.email 'ci-bot@example.com'
          echo "done CI BOT"
          git add manifest
          echo "git adding"
          git commit -m "Update image tags to $IMAGE_TAG from the last CI update"
          git push
          echo "done pushing"
    
  garbage_disposal:
     needs: push_to_dockerHub
     runs-on: [self-hosted, CI-server]
     steps:
      - name: remove containers
        run: docker compose down
      - name: remove images
        run: |
          for image in $(docker images --format "{{.Repository}}" | grep react)
            do
             
             TAG_AND_IMAGE=$(docker images --format "{{.Repository}}:{{.Tag}}")
             echo "image with repo+tag:${TAG_AND_IMAGE}"
             tag=$(echo ${TAG_AND_IMAGE} | awk -F: '{print $2}' )
             echo "tag only:${tag}"
          done
          for image in $(docker images --format "{{.Repository}}" | grep '^mysql\|arielguez/mysql')
            do
             
             TAG_AND_IMAGE=$(docker images --format "{{.Repository}}:{{.Tag}}")
             echo "image with repo+tag:${TAG_AND_IMAGE}"
             tag=$(echo ${TAG_AND_IMAGE} | awk -F: '{print $2}' )
             echo "tag only:${tag}"
             docker rmi -f ${image}:${tag}
          done

        
          
          
           
          
        
     
 
   
